[{"/Users/josephbeuckman/Documents/instrument/dashboard/src/index.js":"1","/Users/josephbeuckman/Documents/instrument/dashboard/src/reportWebVitals.js":"2","/Users/josephbeuckman/Documents/instrument/dashboard/src/components/App.js":"3","/Users/josephbeuckman/Documents/instrument/dashboard/src/components/Annotations.js":"4","/Users/josephbeuckman/Documents/instrument/dashboard/src/client/index.js":"5","/Users/josephbeuckman/Documents/instrument/dashboard/src/components/makePromiseCancelable.js":"6"},{"size":489,"mtime":1616425605489,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1616425605490,"results":"9","hashOfConfig":"8"},{"size":4765,"mtime":1644196214307,"results":"10","hashOfConfig":"8"},{"size":809,"mtime":1616425605489,"results":"11","hashOfConfig":"8"},{"size":878,"mtime":1616425605489,"results":"12","hashOfConfig":"8"},{"size":343,"mtime":1644196202907,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i595kt",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/josephbeuckman/Documents/instrument/dashboard/src/index.js",[],"/Users/josephbeuckman/Documents/instrument/dashboard/src/reportWebVitals.js",[],"/Users/josephbeuckman/Documents/instrument/dashboard/src/components/App.js",["28"],"import { useEffect, useState, useCallback } from 'react'\nimport { VictoryChart, VictoryAxis, VictoryLine, VictoryArea, createContainer } from 'victory'\nimport Annotations from './Annotations'\nimport { groupBy, mapObjIndexed, prop } from 'ramda'\nimport SunCalc from 'suncalc'\nimport client from '../client'\nimport debounce from 'lodash.debounce'\nimport makePromiseCancelable from './makePromiseCancelable'\n\nconst colors = ['#9e6864', '#3f0f63', '#35868c', '#f24b3f', '#6d9c49']\n\nconst SelectDataContainer = createContainer('zoom', 'voronoi')\n\nconst DAY = 24 * 3600 * 1000\nconst START_DATE = new Date('1/26/2021')\n\nlet currentRequest\n\nconst now = new Date()\n\nconst App = () => {\n  const [series, setSeries] = useState()\n  const [annotations, setAnnotations] = useState([])\n  const [voronoiData, setVoronoiData] = useState()\n\n  const updateData = debounce(\n    (from, to) => {\n      if (currentRequest) {\n        console.log('cancel')\n        currentRequest.cancel()\n      }\n\n      currentRequest = makePromiseCancelable(client.Readings.list({ from, to }))\n\n      currentRequest\n        .then((records) => {\n          const groups = groupBy(prop('source'))(records)\n          let i = 0\n          const seriesFromArray = (data) => ({ data, color: colors[i++ % colors.length] })\n          const newSeries = mapObjIndexed(seriesFromArray)(groups)\n          setSeries(newSeries)\n        })\n        .catch((error) => console.error(error))\n        .finally(() => {\n          currentRequest = null\n        })\n    },\n    100,\n    { trailing: true }\n  )\n\n  useEffect(() => {\n    updateData()\n  }, [])\n\n  const handleDomainChanged = useCallback(\n    (domain) => {\n      // setZoomDomainX(domain.x)\n\n      updateData(domain.x[0].valueOf(), domain.x[1].valueOf())\n    },\n    [updateData]\n  )\n\n  const handleClickLegend = useCallback((key) => {\n    console.log(key)\n  }, [])\n\n  const clickChart = useCallback(() => {\n    console.log(setAnnotations(voronoiData))\n  }, [voronoiData])\n\n  return (\n    <div className=\"App\">\n      {series &&\n        Object.keys(series).map((key) => (\n          <span onClick={() => handleClickLegend(key)} style={{ padding: 5 }}>\n            <span\n              style={{\n                backgroundColor: series[key].color,\n                display: 'inline-block',\n                width: 20,\n                height: 20,\n              }}\n            ></span>{' '}\n            {key}\n          </span>\n        ))}\n\n      <VictoryChart\n        padding={25}\n        height={window.innerHeight - 100}\n        width={window.innerWidth}\n        scale={{ x: 'time' }}\n        minDomain={{ x: START_DATE, y: -30 }}\n        maxDomain={{ x: now, y: 55 }}\n        containerComponent={\n          <SelectDataContainer\n            zoomDimension=\"x\"\n            zoomDomain={{ x: [now.valueOf() - 3 * DAY, now.valueOf()] }}\n            responsive={false}\n            onZoomDomainChange={handleDomainChanged}\n            allowPan={true}\n            allowZoom={true}\n            labels={({ datum }) => {\n              // console.log(datum)\n              return datum.reading || datum.y\n            }}\n            onActivated={(points) => setVoronoiData(points)}\n            events={{ onClick: clickChart }}\n          />\n        }\n      >\n        <VictoryArea\n          samples={500}\n          style={{ data: { fill: '#ffee99' } }}\n          y={(data) => {\n            return Math.max(\n              0,\n              (SunCalc.getPosition(data.x, 45.060879, -93.2219807).altitude * 180) / Math.PI\n            )\n          }}\n        />\n\n        <VictoryArea\n          samples={500}\n          style={{ data: { fill: '#78c' } }}\n          y={(data) => {\n            return Math.min(\n              0,\n              (SunCalc.getPosition(data.x, 45.060879, -93.2219807).altitude * 180) / Math.PI\n            )\n          }}\n        />\n\n        {series &&\n          Object.keys(series).map((key) => {\n            const item = series[key]\n            return (\n              <VictoryLine\n                key={key}\n                name={key}\n                style={{\n                  data: {\n                    strokeWidth: 1,\n                    stroke: item.color,\n                  },\n                  parent: { border: `1px solid #666` },\n                }}\n                data={item.data}\n                x={'timestamp'}\n                y={'reading'}\n              />\n            )\n          })}\n\n        <VictoryAxis\n          style={{\n            grid: { stroke: '#818e99', strokeWidth: 0.5 },\n          }}\n        />\n        <VictoryAxis\n          dependentAxis\n          style={{\n            grid: { stroke: '#818e99', strokeWidth: 0.5 },\n          }}\n        />\n\n        <Annotations annotations={annotations} />\n      </VictoryChart>\n    </div>\n  )\n}\n\nexport default App\n","/Users/josephbeuckman/Documents/instrument/dashboard/src/components/Annotations.js",[],"/Users/josephbeuckman/Documents/instrument/dashboard/src/client/index.js",[],["29","30"],"/Users/josephbeuckman/Documents/instrument/dashboard/src/components/makePromiseCancelable.js",[],{"ruleId":"31","severity":1,"message":"32","line":54,"column":6,"nodeType":"33","endLine":54,"endColumn":8,"suggestions":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.","ArrayExpression",["39"],"no-native-reassign",["40"],"no-negated-in-lhs",["41"],{"desc":"42","fix":"43"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [updateData]",{"range":"44","text":"45"},[1585,1587],"[updateData]"]
[{"/Users/josephbeuckman/Documents/instrument/dashboard/src/index.js":"1","/Users/josephbeuckman/Documents/instrument/dashboard/src/reportWebVitals.js":"2","/Users/josephbeuckman/Documents/instrument/dashboard/src/components/App.js":"3","/Users/josephbeuckman/Documents/instrument/dashboard/src/components/Annotations.js":"4","/Users/josephbeuckman/Documents/instrument/dashboard/src/client/index.js":"5"},{"size":489,"mtime":1616425605489,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1616425605490,"results":"8","hashOfConfig":"7"},{"size":4542,"mtime":1616537322633,"results":"9","hashOfConfig":"7"},{"size":809,"mtime":1616425605489,"results":"10","hashOfConfig":"7"},{"size":878,"mtime":1616425605489,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"vaic7o",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/josephbeuckman/Documents/instrument/dashboard/src/index.js",[],["25","26"],"/Users/josephbeuckman/Documents/instrument/dashboard/src/reportWebVitals.js",[],"/Users/josephbeuckman/Documents/instrument/dashboard/src/components/App.js",["27","28","29"],"import { useEffect, useState, useCallback } from 'react'\nimport { VictoryChart, VictoryAxis, VictoryLine, VictoryArea, createContainer } from 'victory'\nimport Annotations from './Annotations'\nimport { groupBy, mapObjIndexed, prop } from 'ramda'\nimport SunCalc from 'suncalc'\nimport client from '../client'\nimport debounce from 'lodash.debounce'\n\nconst colors = ['#9e6864', '#3f0f63', '#35868c', '#f24b3f', '#6d9c49']\n\nconst SelectDataContainer = createContainer('zoom', 'voronoi')\n\nconst DAY = 24 * 3600 * 1000\nconst START_DATE = new Date('1/26/2021')\n\nconst App = () => {\n  const [series, setSeries] = useState()\n  const [annotations, setAnnotations] = useState([])\n  const [voronoiData, setVoronoiData] = useState()\n  const [now, setNow] = useState(new Date())\n  const [zoomDomainX, setZoomDomainX] = useState([now.valueOf])\n\n  // const now = new Date()\n\n  const updateData = debounce(\n    (from, to) => {\n      client.Readings.list({ from, to }).then((records) => {\n        const groups = groupBy(prop('source'))(records)\n        let i = 0\n        const seriesFromArray = (data) => ({ data, color: colors[i++ % colors.length] })\n        const newSeries = mapObjIndexed(seriesFromArray)(groups)\n        setSeries(newSeries)\n      })\n    },\n    500,\n    { trailing: true }\n  )\n\n  useEffect(() => {\n    updateData()\n\n    setInterval(updateData, 5 * 60 * 1000)\n  }, [])\n\n  const handleDomainChanged = useCallback(\n    (domain) => {\n      setZoomDomainX(domain.x)\n\n      updateData(domain.x[0].valueOf(), domain.x[1].valueOf())\n    },\n    [updateData]\n  )\n\n  const handleClickLegend = useCallback((key) => {\n    console.log(key)\n  }, [])\n\n  const clickChart = useCallback(() => {\n    console.log(setAnnotations(voronoiData))\n  }, [voronoiData])\n\n  return (\n    <div className=\"App\">\n      {series &&\n        Object.keys(series).map((key) => (\n          <span onClick={() => handleClickLegend(key)} style={{ padding: 5 }}>\n            <span\n              style={{\n                backgroundColor: series[key].color,\n                display: 'inline-block',\n                width: 20,\n                height: 20,\n              }}\n            ></span>{' '}\n            {key}\n          </span>\n        ))}\n\n      <VictoryChart\n        padding={25}\n        height={window.innerHeight - 100}\n        width={window.innerWidth}\n        scale={{ x: 'time' }}\n        minDomain={{ x: START_DATE, y: -30 }}\n        maxDomain={{ x: now, y: 55 }}\n        containerComponent={\n          <SelectDataContainer\n            zoomDimension=\"x\"\n            zoomDomain={{ x: [now.valueOf() - 3 * DAY, now.valueOf()] }}\n            responsive={false}\n            onZoomDomainChange={handleDomainChanged}\n            allowPan={true}\n            allowZoom={true}\n            labels={({ datum }) => {\n              // console.log(datum)\n              return datum.reading || datum.y\n            }}\n            onActivated={(points) => setVoronoiData(points)}\n            events={{ onClick: clickChart }}\n          />\n        }\n      >\n        <VictoryArea\n          samples={500}\n          style={{ data: { fill: '#ffee99' } }}\n          y={(data) => {\n            return Math.max(\n              0,\n              (SunCalc.getPosition(data.x, 45.060879, -93.2219807).altitude * 180) / Math.PI\n            )\n          }}\n        />\n\n        <VictoryArea\n          samples={500}\n          style={{ data: { fill: '#78c' } }}\n          y={(data) => {\n            return Math.min(\n              0,\n              (SunCalc.getPosition(data.x, 45.060879, -93.2219807).altitude * 180) / Math.PI\n            )\n          }}\n        />\n\n        {series &&\n          Object.keys(series).map((key) => {\n            const item = series[key]\n            return (\n              <VictoryLine\n                key={key}\n                name={key}\n                style={{\n                  data: {\n                    strokeWidth: 1,\n                    stroke: item.color,\n                  },\n                  parent: { border: `1px solid #666` },\n                }}\n                data={item.data}\n                x={'timestamp'}\n                y={'reading'}\n              />\n            )\n          })}\n\n        <VictoryAxis\n          style={{\n            grid: { stroke: '#818e99', strokeWidth: 0.5 },\n          }}\n        />\n        <VictoryAxis\n          dependentAxis\n          style={{\n            grid: { stroke: '#818e99', strokeWidth: 0.5 },\n          }}\n        />\n\n        <Annotations annotations={annotations} />\n      </VictoryChart>\n    </div>\n  )\n}\n\nexport default App\n","/Users/josephbeuckman/Documents/instrument/dashboard/src/components/Annotations.js",[],"/Users/josephbeuckman/Documents/instrument/dashboard/src/client/index.js",[],["30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":20,"column":15,"nodeType":"38","messageId":"39","endLine":20,"endColumn":21},{"ruleId":"36","severity":1,"message":"40","line":21,"column":10,"nodeType":"38","messageId":"39","endLine":21,"endColumn":21},{"ruleId":"41","severity":1,"message":"42","line":43,"column":6,"nodeType":"43","endLine":43,"endColumn":8,"suggestions":"44"},{"ruleId":"32","replacedBy":"45"},{"ruleId":"34","replacedBy":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'setNow' is assigned a value but never used.","Identifier","unusedVar","'zoomDomainX' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.","ArrayExpression",["49"],["47"],["48"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [updateData]",{"range":"52","text":"53"},[1365,1367],"[updateData]"]
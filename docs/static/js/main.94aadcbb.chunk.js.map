{"version":3,"sources":["components/Annotations.js","client/index.js","components/App.js","reportWebVitals.js","index.js"],"names":["Annotations","annotations","scale","useState","x","y","dy","dx","props","setProps","map","annotation","_x","_y","color","editMode","note","title","label","align","orientation","bgPadding","padding","titleColor","onDrag","e","client","forge","clientId","host","resources","Readings","list","path","headers","middleware","response","next","then","parse","data","columns","cast","value","column","parseInt","parseFloat","colors","SelectDataContainer","createContainer","START_DATE","Date","App","series","setSeries","setAnnotations","voronoiData","setVoronoiData","now","valueOf","setZoomDomainX","updateData","debounce","from","to","records","groups","groupBy","prop","i","newSeries","mapObjIndexed","length","trailing","useEffect","setInterval","handleDomainChanged","useCallback","domain","handleClickLegend","key","console","log","clickChart","className","Object","keys","onClick","style","backgroundColor","display","width","height","window","innerHeight","innerWidth","minDomain","maxDomain","containerComponent","zoomDimension","zoomDomain","responsive","onZoomDomainChange","allowPan","allowZoom","labels","datum","reading","onActivated","points","events","samples","fill","Math","max","SunCalc","getPosition","altitude","PI","min","item","name","strokeWidth","stroke","parent","border","grid","dependentAxis","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94aadcbb.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { AnnotationLabel } from 'react-annotation'\n\nconst Annotations = ({ annotations, scale }) => {\n  const [props, setProps] = useState({\n    x: 10,\n    y: 10,\n    dy: 50,\n    dx: 50,\n  })\n\n  return annotations.map((annotation) => {\n    return (\n      <AnnotationLabel\n        x={scale.x(annotation._x)}\n        y={scale.y(annotation._y)}\n        dx={props.dx}\n        dy={props.dy}\n        color={'#333'}\n        editMode={true}\n        note={{\n          title: 'Annotations :)',\n          label: 'Longer text to show text wrapping',\n          align: 'middle',\n          orientation: 'topBottom',\n          bgPadding: 10,\n          padding: 10,\n          titleColor: '#666',\n        }}\n        onDrag={(e) => setProps(e)}\n      />\n    )\n  })\n}\n\nexport default Annotations\n","import forge from 'mappersmith'\nimport parse from 'csv-parse/lib/sync'\n\nconst ParseDattaMiddleware = () => ({\n  response(next) {\n    return next().then((response) =>\n      parse(response.data(), {\n        columns: true,\n        cast: (value, { column }) => {\n          switch (column) {\n            case 'timestamp':\n              return parseInt(value)\n            case 'reading':\n              return parseFloat(value)\n            default:\n              return value\n          }\n        },\n      })\n    )\n  },\n})\n\nconst client = new forge({\n  clientId: 'readings',\n  host: 'https://if2574leol.execute-api.us-east-2.amazonaws.com/dev',\n  resources: {\n    Readings: {\n      list: {\n        path: '/readings',\n        headers: { 'x-api-key': 'esHC6lRZzJ2R2dnKXVI6157bY5wirAkh6uznnGaU' },\n        middleware: [ParseDattaMiddleware],\n      },\n    },\n  },\n})\n\nexport default client\n","import { useEffect, useState, useCallback } from 'react'\nimport { VictoryChart, VictoryAxis, VictoryLine, VictoryArea, createContainer } from 'victory'\nimport Annotations from './Annotations'\nimport { groupBy, mapObjIndexed, prop } from 'ramda'\nimport SunCalc from 'suncalc'\nimport client from '../client'\nimport debounce from 'lodash.debounce'\n\nconst colors = ['#9e6864', '#3f0f63', '#35868c', '#f24b3f', '#6d9c49']\n\nconst SelectDataContainer = createContainer('zoom', 'voronoi')\n\nconst DAY = 24 * 3600 * 1000\nconst START_DATE = new Date('1/26/2021')\n\nconst App = () => {\n  const [series, setSeries] = useState()\n  const [annotations, setAnnotations] = useState([])\n  const [voronoiData, setVoronoiData] = useState()\n  const [now, setNow] = useState(new Date())\n  const [zoomDomainX, setZoomDomainX] = useState([now.valueOf])\n\n  // const now = new Date()\n\n  const updateData = debounce(\n    (from, to) => {\n      client.Readings.list({ from, to }).then((records) => {\n        const groups = groupBy(prop('source'))(records)\n        let i = 0\n        const seriesFromArray = (data) => ({ data, color: colors[i++ % colors.length] })\n        const newSeries = mapObjIndexed(seriesFromArray)(groups)\n        setSeries(newSeries)\n      })\n    },\n    500,\n    { trailing: true }\n  )\n\n  useEffect(() => {\n    updateData()\n\n    setInterval(updateData, 5 * 60 * 1000)\n  }, [])\n\n  const handleDomainChanged = useCallback(\n    (domain) => {\n      setZoomDomainX(domain.x)\n\n      updateData(domain.x[0].valueOf(), domain.x[1].valueOf())\n    },\n    [updateData]\n  )\n\n  const handleClickLegend = useCallback((key) => {\n    console.log(key)\n  }, [])\n\n  const clickChart = useCallback(() => {\n    console.log(setAnnotations(voronoiData))\n  }, [voronoiData])\n\n  return (\n    <div className=\"App\">\n      {series &&\n        Object.keys(series).map((key) => (\n          <span onClick={() => handleClickLegend(key)} style={{ padding: 5 }}>\n            <span\n              style={{\n                backgroundColor: series[key].color,\n                display: 'inline-block',\n                width: 20,\n                height: 20,\n              }}\n            ></span>{' '}\n            {key}\n          </span>\n        ))}\n\n      <VictoryChart\n        padding={25}\n        height={window.innerHeight - 100}\n        width={window.innerWidth}\n        scale={{ x: 'time' }}\n        minDomain={{ x: START_DATE, y: -30 }}\n        maxDomain={{ x: now, y: 55 }}\n        containerComponent={\n          <SelectDataContainer\n            zoomDimension=\"x\"\n            zoomDomain={{ x: [now.valueOf() - 3 * DAY, now.valueOf()] }}\n            responsive={false}\n            onZoomDomainChange={handleDomainChanged}\n            allowPan={true}\n            allowZoom={true}\n            labels={({ datum }) => {\n              // console.log(datum)\n              return datum.reading || datum.y\n            }}\n            onActivated={(points) => setVoronoiData(points)}\n            events={{ onClick: clickChart }}\n          />\n        }\n      >\n        <VictoryArea\n          samples={500}\n          style={{ data: { fill: '#ffee99' } }}\n          y={(data) => {\n            return Math.max(\n              0,\n              (SunCalc.getPosition(data.x, 45.060879, -93.2219807).altitude * 180) / Math.PI\n            )\n          }}\n        />\n\n        <VictoryArea\n          samples={500}\n          style={{ data: { fill: '#78c' } }}\n          y={(data) => {\n            return Math.min(\n              0,\n              (SunCalc.getPosition(data.x, 45.060879, -93.2219807).altitude * 180) / Math.PI\n            )\n          }}\n        />\n\n        {series &&\n          Object.keys(series).map((key) => {\n            const item = series[key]\n            return (\n              <VictoryLine\n                key={key}\n                name={key}\n                style={{\n                  data: {\n                    strokeWidth: 1,\n                    stroke: item.color,\n                  },\n                  parent: { border: `1px solid #666` },\n                }}\n                data={item.data}\n                x={'timestamp'}\n                y={'reading'}\n              />\n            )\n          })}\n\n        <VictoryAxis\n          style={{\n            grid: { stroke: '#818e99', strokeWidth: 0.5 },\n          }}\n        />\n        <VictoryAxis\n          dependentAxis\n          style={{\n            grid: { stroke: '#818e99', strokeWidth: 0.5 },\n          }}\n        />\n\n        <Annotations annotations={annotations} />\n      </VictoryChart>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}